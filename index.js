const { fifaData } = require('./fifa.js')


/* GÃ¶rev 1: 
	Verilen datayÄ± parÃ§alayarak aÅŸaÄŸÄ±daki verileri (console.log-ing) elde ederek pratik yapÄ±n. 
	
	ðŸ’¡ Ä°PUCU: Ã–ncelikle datayÄ± filtrelemek isteyebilirsiniz */

//(a) 2014 DÃ¼nya kupasÄ± Finali Evsahibi takÄ±m ismi (dizide "Home Team Name" anahtarÄ±)
let data2014 = fifaData.filter(
	(final) => final["Stage"] === "Final" && final["Year"] === 2014);
const evsahibi = data2014[0]["Home Team Name"];
console.log("GÃ¶rev 1a", evsahibi);

//(b) 2014 DÃ¼nya kupasÄ± Finali Deplasman takÄ±m ismi  (dizide "Away Team Name" anahtarÄ±)
const deplasman = data2014[0]["Away Team Name"];
console.log("GÃ¶rev 2a", deplasman);
//(c) 2014 DÃ¼nya kupasÄ± finali Ev sahibi takÄ±m golleri (dizide "Home Team Goals" anahtarÄ±)
const goal = data2014[0]["Home Team Goals"];
console.log("GÃ¶rev 3a", goal);


//(d)2014 DÃ¼nya kupasÄ± finali Deplasman takÄ±m golleri  (dizide "Away Team Goals" anahtarÄ±)
const depgoal = data2014[0]["Away Team Goals"];
console.log("GÃ¶rev 3a", depgoal);


//(e) 2014 DÃ¼nya kupasÄ± finali kazananÄ±*/
const winnerTeam = data2014[0]["Win conditions"];
console.log("GÃ¶rev 4a", winnerTeam);

/*  GÃ¶rev 2: 
	Finaller adlÄ± fonksiyonu kullanarak aÅŸaÄŸÄ±dakileri uygulayÄ±n:
	1. Bir dizi(array) olan Fifa datasÄ±nÄ± fonksiyonun birinci parametresi olarak alacak
	2. Sadece final maÃ§larÄ±nÄ± iÃ§eren nesnenin(object) datalarÄ±nÄ± filtreleyerek, bir dizi olarak dÃ¶ndÃ¼recek(return)
	
	ðŸ’¡ Ä°PUCU - verilen data iÃ§indeki nesnelerin(objects) "Stage" anahtarÄ±na bakmalÄ±sÄ±nÄ±z
*/
function Finaller(array) {
	const finals = array.filter((final) => final["Stage"] === "Final");

	return finals;
}
console.log("GÃ¶rev 2", Finaller(fifaData));


/*  GÃ¶rev 3: 
	Bir higher-order fonksiyonu olan Yillar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n: 
	1. fifaData dizisini(array) fonksiyonun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. Finaller data setindeki tÃ¼m yÄ±llarÄ± iÃ§eren "years" adÄ±ndaki diziyi(array) dÃ¶ndÃ¼recek
	*/

function Yillar(array, callback) {
	const years = callback(array).map((yil) => yil.Year);
	return years;
}

console.log("GÃ–REV 3 ", Yillar(fifaData, Finaller));

/*  GÃ¶rev 4: 
	Bir higher-order fonksiyonunu olan Kazananlar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n:  
	1. fifaData dizisini(array) fonksiyonunun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. Her final maÃ§Ä±nÄ±n kazananÄ±nÄ± (evsahibi ya da deplasman) belirleyecek
	ðŸ’¡ Ä°PUCU: Beraberlikler(ties) iÃ§in ÅŸimdilik endiÅŸelenmeyin (DetaylÄ± bilgi iÃ§in README dosyasÄ±na bakabilirsiniz.)
	4. TÃ¼m kazanan Ã¼lkelerin isimlerini iÃ§eren `kazananlar` adÄ±nda bir dizi(array) dÃ¶ndÃ¼recek(return)  */


function Kazananlar(array, callback) {
	let finaller = callback(array);
	const filtre = finaller.filter((final) => final["Home Team Goals"] !== final["Away Team Goals"]);           //////
	const winnersClubs = filtre.map(mac => {
		if (mac["Home Team Goals"] > mac["Away Team Goals"]) {
			console.log("GÃ¶rev 4 Ev Sahibi ", mac['Home Team Name'] + ' ev sahibi olarak kazandÄ±.');
			return (mac['Home Team Name']);
		} else if (mac["Home Team Goals"] < mac["Away Team Goals"]) {
			console.log("GÃ¶rev 4 Deplasman  ", mac['Away Team Name'] + ' ev sahibi olarak kazandÄ±.');
			return (mac['Away Team Name']);
		}
	});
	/*for (let i = 0; i < callback(array).length; i++) {
		const maclar = callback(array)[i];
		if (maclar["Home Team Goals"] > maclar["Away Team Goals"]) {
			winnersClubs.push(maclar['Home Team Name']);
			console.log("GÃ¶rev 4 Ev Sahibi ", maclar['Home Team Name'] + ' ev sahibi olarak kazandÄ±.');
		} else if (maclar["Home Team Goals"] < maclar["Away Team Goals"]) {
			console.log("GÃ¶rev 4 Deplasman  ", maclar['Away Team Name'] + ' ev sahibi olarak kazandÄ±.');
			winnersClubs.push(maclar['Away Team Name']);

		} else if (maclar["Home Team Goals"] == maclar["Away Team Goals"]);
		console.log("GÃ¶rev 4 Beraberlik", maclar["Win conditions"])
	}*/

	return winnersClubs;
}
console.log("KAZANAN TAKIMLAR ", Kazananlar(fifaData, Finaller));


/*  GÃ¶rev 5: 
	Bir higher-order fonksiyonu olan YillaraGoreKazananlar isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n:
	1. fifaData dizisini(array) fonksiyonunun birinci parametresi olarak alacak
	2. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z Finaller fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun ikinci parametresi olarak alacak
	3. GÃ¶rev 3'de yazdÄ±ÄŸÄ±nÄ±z Yillar fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun Ã¼Ã§Ã¼ncÃ¼ parametresi olarak alacak
	4. GÃ¶rev 4'de yazdÄ±ÄŸÄ±nÄ±z Kazananlar fonksiyonunu, geriÃ§aÄŸÄ±rÄ±m(callback) olarak fonksiyonun dÃ¶rdÃ¼ncÃ¼ parametresi olarak alacak
	5. Her yÄ±l iÃ§in "{yÄ±l} yÄ±lÄ±nda, {Ã¼lke} dÃ¼nya kupasÄ±nÄ± kazandÄ±!" cÃ¼mlesini(string) iÃ§eren bir diziyi(array) dÃ¶ndÃ¼recek
	
	ðŸ’¡ Ä°PUCU: her cÃ¼mlenin adÄ±m 4'te belirtilen cÃ¼mleyle birebir aynÄ± olmasÄ± gerekmektedir.
*/

function YillaraGoreKazananlar(array, callback0, callback1, callback2) {
	let sonmaclar = callback0(array);
	const wins = callback2(array);
	const winyears = callback1(array);
	const cumleler = winyears.map((yil, index) => [yil] + " yÄ±lÄ±nda," + [wins[index]] + "dÃ¼nya kupasÄ±nÄ± kazandÄ±!");
	return cumleler;
}
console.log("GÃ¶rev 5 ", YillaraGoreKazananlar(fifaData, Finaller, Yillar, Kazananlar));





/*  GÃ¶rev 6: 
	Bir higher order fonksiyonu olan `OrtalamaGolSayisi` isimli fonksiyona aÅŸaÄŸÄ±dakileri uygulayÄ±n: 
	1. GÃ¶rev 2'de yazdÄ±ÄŸÄ±nÄ±z `Finaller` fonksiyonunu birinci parametre olarak alacak; 'fifaData' dizisini argÃ¼man olarak eklediÄŸinizden emin olun
	
	ðŸ’¡ Ä°PUCU: Ã‡aÄŸÄ±rma Ã¶rneÄŸi: `OrtalamaGolSayisi(Finaller(fifaData));`
	
	2. Her maÃ§ iÃ§in Ortalama toplam evsahibi gol sayÄ±sÄ± ve toplam deplasman gol sayÄ±sÄ±nÄ± hesaplayacak (her maÃ§ta atÄ±lan toplam gol sayÄ±sÄ±)
	
	3. Sonucun 2. ondalÄ±ÄŸÄ±nÄ± yuvarlayÄ±p, bulunan deÄŸeri dÃ¶ndÃ¼recek(return)
	
	ðŸ’¡ Ä°PUCU: .reduce, .toFixed (dizilim(syntax) iÃ§in MDN'ye bakÄ±n) kullan, ve bunu 2 adÄ±mda yapÄ±n) 
	
*/

function OrtalamaGolSayisi(array) {
	let sumgol1 = 0;
	const toplamgol1 = array.reduce((toplam, mac) => {                                  // .reduce kullanarak for ile yaptÄ±ÄŸÄ±mÄ±zÄ± yapabiliyor!!!!
		return toplam + mac["Home Team Goals"] + mac["Away Team Goals"]
	}, 0);
	/*for (let i = 0; i < array.length; i++) {
		sumgol1 += array[i]["Home Team Goals"] + array[i]["Away Team Goals"];
	} */
	const ortgol = (toplamgol1 / array.length);
	let ortalamagol = ortgol.toFixed(2);
	return ortalamagol;
} console.log("ORTALAMA GOL ", OrtalamaGolSayisi(Finaller(fifaData)));

/// EKSTRA Ã‡ALIÅžMALAR ///

/*  BONUS 1:  
	`UlkelerinKazanmaSayilari` isminde bir fonksiyon oluÅŸturun, parametre olarak `data` ve `takÄ±m kÄ±saltmalarÄ±nÄ±` alacak ve hangi Ã¼lkenin kaÃ§ dÃ¼nya kupasÄ± olduÄŸunu dÃ¶ndÃ¼recek
	
	Ä°pucu: "takÄ±m kÄ±saltmalarÄ±" (team initials) iÃ§in datada araÅŸtÄ±rma yapÄ±n!
Ä°pucu: `.reduce` KullanÄ±n*/

function UlkelerinKazanmaSayilari(/* kodlar buraya */) {

	/* kodlar buraya */

}



/*  BONUS 2:  
EnCokGolAtan() isminde bir fonksiyon yazÄ±n, `data` yÄ± parametre olarak alsÄ±n ve DÃ¼nya kupasÄ± finallerinde en Ã§ok gol atan takÄ±mÄ± dÃ¶ndÃ¼rsÃ¼n */

function EnCokGolAtan(/* kodlar buraya */) {

	/* kodlar buraya */

}


/*  BONUS 3: 
EnKotuDefans() adÄ±nda bir fonksiyon yazÄ±n, `data` yÄ± parametre olarak alsÄ±n ve DÃ¼nya kupasÄ±nda finallerinde en Ã§ok golÃ¼ yiyen takÄ±mÄ± dÃ¶ndÃ¼rsÃ¼n*/

function EnKotuDefans(/* kodlar buraya */) {

	/* kodlar buraya */

}


/* Hala vaktiniz varsa, README dosyasÄ±nda listelenen hedeflerden istediÄŸinizi aÅŸaÄŸÄ±daki boÅŸluÄŸa yazabilirsiniz. */


/* Bu satÄ±rÄ±n aÅŸaÄŸÄ±sÄ±ndaki kodlarÄ± lÃ¼tfen deÄŸiÅŸtirmeyin */
function sa() {
	console.log('Kodlar Ã§alÄ±ÅŸÄ±yor');
	return 'as';
}
sa();
module.exports = {
	sa,
	Finaller,
	Yillar,
	Kazananlar,
	YillaraGoreKazananlar,
	OrtalamaGolSayisi
}
